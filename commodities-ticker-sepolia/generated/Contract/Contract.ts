// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CommodityCreated extends ethereum.Event {
  get params(): CommodityCreated__Params {
    return new CommodityCreated__Params(this);
  }
}

export class CommodityCreated__Params {
  _event: CommodityCreated;

  constructor(event: CommodityCreated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OrderMatched extends ethereum.Event {
  get params(): OrderMatched__Params {
    return new OrderMatched__Params(this);
  }
}

export class OrderMatched__Params {
  _event: OrderMatched;

  constructor(event: OrderMatched) {
    this._event = event;
  }

  get buyOrderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sellOrderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get matchedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get matchedPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OrderPlaced extends ethereum.Event {
  get params(): OrderPlaced__Params {
    return new OrderPlaced__Params(this);
  }
}

export class OrderPlaced__Params {
  _event: OrderPlaced;

  constructor(event: OrderPlaced) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isBuyOrder(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class OrderRemoved extends ethereum.Event {
  get params(): OrderRemoved__Params {
    return new OrderRemoved__Params(this);
  }
}

export class OrderRemoved__Params {
  _event: OrderRemoved;

  constructor(event: OrderRemoved) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Contract__buyOrdersResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getUser(): Address {
    return this.value1;
  }

  getToken(): Address {
    return this.value2;
  }

  getAmount(): BigInt {
    return this.value3;
  }

  getPrice(): BigInt {
    return this.value4;
  }

  getIsBuyOrder(): boolean {
    return this.value5;
  }
}

export class Contract__sellOrdersResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getUser(): Address {
    return this.value1;
  }

  getToken(): Address {
    return this.value2;
  }

  getAmount(): BigInt {
    return this.value3;
  }

  getPrice(): BigInt {
    return this.value4;
  }

  getIsBuyOrder(): boolean {
    return this.value5;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  buyOrders(param0: BigInt): Contract__buyOrdersResult {
    let result = super.call(
      "buyOrders",
      "buyOrders(uint256):(uint256,address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__buyOrdersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_buyOrders(
    param0: BigInt
  ): ethereum.CallResult<Contract__buyOrdersResult> {
    let result = super.tryCall(
      "buyOrders",
      "buyOrders(uint256):(uint256,address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__buyOrdersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  commodities(param0: Address): boolean {
    let result = super.call("commodities", "commodities(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_commodities(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("commodities", "commodities(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sellOrders(param0: BigInt): Contract__sellOrdersResult {
    let result = super.call(
      "sellOrders",
      "sellOrders(uint256):(uint256,address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__sellOrdersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_sellOrders(
    param0: BigInt
  ): ethereum.CallResult<Contract__sellOrdersResult> {
    let result = super.tryCall(
      "sellOrders",
      "sellOrders(uint256):(uint256,address,address,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__sellOrdersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }
}

export class CreateCommodityCall extends ethereum.Call {
  get inputs(): CreateCommodityCall__Inputs {
    return new CreateCommodityCall__Inputs(this);
  }

  get outputs(): CreateCommodityCall__Outputs {
    return new CreateCommodityCall__Outputs(this);
  }
}

export class CreateCommodityCall__Inputs {
  _call: CreateCommodityCall;

  constructor(call: CreateCommodityCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateCommodityCall__Outputs {
  _call: CreateCommodityCall;

  constructor(call: CreateCommodityCall) {
    this._call = call;
  }
}

export class MintCommodityTokensCall extends ethereum.Call {
  get inputs(): MintCommodityTokensCall__Inputs {
    return new MintCommodityTokensCall__Inputs(this);
  }

  get outputs(): MintCommodityTokensCall__Outputs {
    return new MintCommodityTokensCall__Outputs(this);
  }
}

export class MintCommodityTokensCall__Inputs {
  _call: MintCommodityTokensCall;

  constructor(call: MintCommodityTokensCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCommodityTokensCall__Outputs {
  _call: MintCommodityTokensCall;

  constructor(call: MintCommodityTokensCall) {
    this._call = call;
  }
}

export class PlaceOrderCall extends ethereum.Call {
  get inputs(): PlaceOrderCall__Inputs {
    return new PlaceOrderCall__Inputs(this);
  }

  get outputs(): PlaceOrderCall__Outputs {
    return new PlaceOrderCall__Outputs(this);
  }
}

export class PlaceOrderCall__Inputs {
  _call: PlaceOrderCall;

  constructor(call: PlaceOrderCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isBuyOrder(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class PlaceOrderCall__Outputs {
  _call: PlaceOrderCall;

  constructor(call: PlaceOrderCall) {
    this._call = call;
  }
}
